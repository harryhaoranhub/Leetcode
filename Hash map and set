1. Hash map
哈希表（Hash Map）是一种使用哈希函数组织数据以支持快速插入和搜索的数据结构。哈希表通常提供以下操作：

- **插入（Insert）**：将一个新的键值对添加到哈希表中。
- **删除（Delete）**：通过键从哈希表中删除对应的键值对。
- **查找（Search）**：通过键快速检索对应的值。

哈希表的性能之所以高效，是因为它通过哈希函数将键转换为数组索引，这个过程是常数时间复杂度的 \( O(1) \)，因此理论上查找、插入和删除操作都能在常数时间内完成。但是，当多个键映射到同一个哈希值时（这称为哈希冲突），哈希表需要一种方式来解决冲突，常见的方法有链表法和开放寻址法。

在Python中，哈希表可以使用内置的字典类型 `dict` 来实现。

下面是一个使用Python字典作为哈希表的简单例子：

```python
# 创建一个空的哈希表
hash_map = {}

# 插入键值对
hash_map['apple'] = 'A sweet red fruit'
hash_map['banana'] = 'A long yellow fruit'
hash_map['mango'] = 'A tropical stone fruit'

# 查找一个键
if 'apple' in hash_map:
    print(f"Apple: {hash_map['apple']}")

# 删除一个键
del hash_map['banana']

# 查看哈希表的内容
print(hash_map)
```

在这个例子中，我们创建了一个哈希表，向其中添加了三个不同的水果及其描述，然后检索了其中一个键的值，并删除了一个键。最后，我们打印出了哈希表的最终状态。

输出应该类似于：
```
Apple: A sweet red fruit
{'apple': 'A sweet red fruit', 'mango': 'A tropical stone fruit'}
```

注意，在Python中，字典的键必须是不可变类型，如整数、浮点数、字符串或元组。

2. Create hash
在Python中，字典（`dict`）类型是内置的哈希表实现。当我们使用花括号 `{}` 创建一个字典时，Python 底层就是使用哈希表来存储这个字典的。

不同于列表（list），字典（dict）具有以下特点，这些特点也正是哈希表的特性：

- **键值对**：字典通过键（key）存储和访问值（value），而不是通过索引。
- **无序**：字典中的元素没有特定的顺序，它们是通过哈希值来组织的。
- **快速访问**：理想情况下，字典的查找、插入和删除操作都是常数时间复杂度 \( O(1) \)，这是因为它们是基于键的哈希来实现的。

在我之前给出的例子中，我们没有直接看到“创建哈希”的代码，因为在Python中，当你创建一个字典时，哈希表的创建是隐式发生的。Python的字典类型已经为我们封装好了哈希表的所有复杂性，包括哈希函数的使用、冲突的解决等。

这是Python字典和列表的一个基本区别，列表使用整数索引来有序存储值，而字典（哈希表）使用键来无序存储值。你可以通过字典的行为来判断它实际上是一个哈希表。例如，你可以在字典中进行非常快速的键查找，无论字典有多大，这是因为它使用哈希函数来直接定位键，而不是像列表那样需要进行线性搜索。

如果需要证明字典是基于哈希表实现的，你可以查看Python的官方文档或源代码，或者通过实验来观察字典操作的性能表现，以验证其操作的时间复杂度。在日常使用中，当我们说到Python字典时，我们可以假定它就是一个哈希表。

3. Set
`set` 和哈希映射（通常在 Python 中指 `dict` 类型）是 Python 中两种非常有用的数据结构。尽管它们在内部实现上有一些相似之处，但它们的用途和行为有明显的不同。

### Set（集合）

- **定义**：在 Python 中，`set` 是一个无序的集合数据类型，它是可变的，可以存储不同类型的唯一元素（即没有重复的元素）。
- **特性**：
  - **唯一性**：集合中的每个元素必须是唯一的。
  - **无序性**：集合中的元素是无序的，不能通过索引或键来访问。
  - **可变性**：可以动态地添加或删除元素。
- **用途**：集合常用于测试成员资格、去除重复项、以及执行数学上的集合操作（如并集、交集、差集等）。
- **创建**：可以使用大括号 `{}` 或 `set()` 函数来创建集合。

### HashMap（哈希映射，Python 中的 `dict`）

- **定义**：哈希映射是一种使用键-值（key-value）对来存储数据的数据结构。在 Python 中，`dict`（字典）是实现哈希映射的内置数据类型。
- **特性**：
  - **键值对**：每个元素都是一个键值对。
  - **键的唯一性**：每个键必须是唯一的。
  - **可变性**：可以动态地添加、修改或删除键值对。
  - **无序性**：直到 Python 3.7，字典是无序的。从 Python 3.7 开始，字典保持插入顺序。
- **用途**：哈希映射用于快速检索（通过键），存储和操作键值对。
- **创建**：可以使用花括号 `{}` 与键值对来创建字典，或者使用 `dict()` 函数。

### 相同点和不同点

**相同点**：
- **内部实现**：都使用哈希表来存储元素，因此具有高效的查找、添加和删除操作。
- **无序性**：集合和字典（直到 Python 3.6）都是无序的；从 Python 3.7 开始，字典保持插入顺序，但集合仍是无序的。
- **唯一性**：集合中的元素必须是唯一的，字典中的键也必须是唯一的。

**不同点**：
- **数据结构类型**：集合仅存储唯一元素，而字典存储键值对。
- **使用场景**：集合主要用于成员资格测试和去重，字典用于存储关联数据。
- **访问方式**：集合元素不能通过索引访问；字典可以通过键来访问对应的值。
- **元素的可哈希性**：集合中的元素必须是可哈希的，而字典中的键必须是可哈希的，但值则无此限制。

综上所述，`set` 和 `dict` 在 Python 中都是非常有用的数据结构，适用于不同的情况和需求。
